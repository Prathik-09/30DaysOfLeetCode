
Brute Force Approach (O(n²))

public class TwoSum{
    public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] + nums[j] == target) {
                    return new int[]{i, j}; // found the pair
                }
            }
        }
        return new int[0]; // fallback, shouldn't happen per constraints
    }
}


Optimized Approach Using HashMap (O(n))

import java.util.HashMap;
import java.util.Map;

public class TwoSum {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>(); // value → index

        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];

            if (map.containsKey(complement)) {
                return new int[]{map.get(complement), i}; // found
            }

            map.put(nums[i], i); // store current value and its index
        }

        return new int[0]; // fallback, shouldn't happen per constraints
    }
}
